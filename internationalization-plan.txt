FASE SITE INTERNATIONALIZATION IMPLEMENTATION PLAN
===================================================

Based on Next.js 14 App Router Internationalization Documentation
https://nextjs.org/docs/pages/guides/internationalization

CURRENT CODEBASE ANALYSIS:
- Next.js 14 App Router structure
- 25+ pages across multiple routes
- Already has next-intl dependency installed (v4.3.4)
- Uses TypeScript throughout
- Firebase authentication and Firestore database

TARGET LANGUAGES:
- English (en) - Default
- German (de) - Primary European market
- French (fr) - Secondary European market  
- Dutch (nl) - Netherlands market

IMPLEMENTATION STEPS:

1. NEXT.JS CONFIGURATION
   - Create next.config.js file with i18n configuration:
     ```javascript
     module.exports = {
       i18n: {
         locales: ['en', 'de', 'fr', 'nl'],
         defaultLocale: 'en',
         localeDetection: true
       }
     }
     ```

2. ROUTING STRUCTURE
   - Next.js will automatically handle locale routing with sub-paths
   - URLs will become: /en/about, /de/about, /fr/about, /nl/about
   - Root / will redirect to default locale based on browser detection

3. TRANSLATION FILES STRUCTURE
   - Create messages/ directory in root
   - Create JSON files for each locale:
     - messages/en.json
     - messages/de.json  
     - messages/fr.json
     - messages/nl.json

4. NEXT-INTL INTEGRATION (Already Installed)
   - Configure next-intl in app/layout.tsx
   - Create locale detection and message loading logic
   - Wrap app with NextIntlClientProvider

5. PAGE MODIFICATIONS
   All existing pages need to be updated to:
   - Accept locale parameter
   - Use useTranslations hook for text content
   - Replace hardcoded strings with translation keys

6. COMPONENT UPDATES
   Components requiring translation:
   - Header.tsx (navigation menu)
   - Footer.tsx (footer content)  
   - TitleHero.tsx (hero text)
   - CTASection.tsx (call-to-action text)
   - ServiceCard.tsx (service descriptions)
   - All form components (labels, placeholders, validation)

7. TRANSLATION KEYS STRUCTURE
   Organize by page/component:
   ```json
   {
     "navigation": {
       "about": "About",
       "services": "Services",
       "contact": "Contact"
     },
     "home": {
       "hero_title": "Federation of European MGAs",
       "hero_subtitle": "Connecting insurance professionals across Europe"
     },
     "forms": {
       "email": "Email Address",
       "password": "Password",
       "submit": "Submit"
     }
   }
   ```

8. FIREBASE/AUTH CONSIDERATIONS
   - Auth error messages need translation
   - Email templates may need localization
   - Database queries remain unchanged

9. SEO OPTIMIZATION
   - Add hreflang meta tags for each locale
   - Update sitemap.xml with localized URLs
   - Ensure proper lang attribute on html element

10. LANGUAGE SWITCHER COMPONENT
    - Create LanguageSwitcher component for Header
    - Use next/router to switch between locales
    - Store user preference in localStorage/cookies

11. TESTING APPROACH
    - Test each locale manually
    - Verify automatic locale detection
    - Test language switching functionality
    - Ensure all forms work in all languages

12. DEPLOYMENT CONSIDERATIONS
    - Vercel automatically supports Next.js i18n
    - No additional configuration needed for deployment
    - Consider CDN caching for translation files

IMPLEMENTATION PRIORITY:
1. Next.js configuration and basic setup
2. Core navigation and layout translations  
3. Homepage and main service pages
4. Authentication forms and user-facing text
5. Remaining secondary pages
6. SEO optimization and testing

ESTIMATED TRANSLATION REQUIREMENTS:
- ~500-800 text strings across all pages
- Professional translation recommended for German, French, Dutch
- Consider industry-specific insurance terminology

MAINTENANCE NOTES:
- New features must include translations for all locales
- Translation files should be version controlled
- Consider using translation management service for larger scale